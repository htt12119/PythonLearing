#-*- coding:utf-8 -*-
class Dict(dict):
    def __init__(self,**kw):
        super(Dict,self).__init__(**kw)

    def __getattr__(self, key):
        try:
            return self[key]
        except KeyError:
            raise AttributeError(r"'Dict' object has no attribute '%s'" % key)

    def __setattr__(self, key, value):
        self[key] = value

d = Dict(a=1,b=2)
print d['a']
print d.a
#-*- coding:utf-8 -*-
class Dict(dict):
    def __init__(self,**kw):
        super(Dict,self).__init__(**kw)

    def __getattr__(self, key):
        try:
            return self[key]
        except KeyError:
            raise AttributeError(r"'Dict' object has no attribute '%s'" % key)

    def __setattr__(self, key, value):
        self[key] = value
import unittest
class TestDict(unittest.TestCase):

    def test_init(self):
        d = Dict(a=1,b='test')
        self.assertEquals(d.a,1)
        self.assertEqual(d.b,'test')
        self.assertTrue(isinstance(d,dict))

    def test_key(self):
        d = Dict()
        d['Key'] = 'value'
        self.assertEqual(d.key,'value')

    def test_attr(self):
        d=Dict()
        d.key = 'value'
        self.assertEqual('key' in d)
        self.assertEqual(d['key'],'value')

    def test_attrerror(self):
        d=Dict()
        with self.assertRaises(AttributeError):
            value = d.empty
    if __name__ == '__main__':
        unittest.main()

