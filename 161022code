#!/usr/bin/env python
#-*- coding:utf-8 -*-
#第一行注释可以让这个文件直接在unix/linux/mac上运行
#第二行表示.py文件本身使用标准utf-8编码
#如果想要引入一个模块必须要在同一个文件路径下
'a test module'
__author__='Michael Liao'

import sys
def test():
    args = sys.argv
    if len(args)==1:
        print 'Hello,world!'
    elif len(args)==2:
        print 'Hello,%s!' % args[1]
    else:
        print 'Too many arguments!'

if __name__=='__main__':
    test()

#!/usr/bin/env python
#-*- coding:utf-8 -*-

try:
    import  cStringIO as StringIO
except ImportError:#导入失败会捕获到ImportError
    import StringIO
#这样可以优先导入cStringIO

#类似simplejson这样的库，在python2.6之前是独立的第三
# 方库，从2.6开始内置，所以，会有这样的写法
try:
    import json #python>=2.6
except ImportError:
    import  simplejson as json #python <= 2.5
#python是动态语言，函数签名一致接口就一样，因此，无论
#无论导入哪个模块后续代码都能正常工作。

#!/usr/bin/env python
#-*- coding:utf-8 -*-

def _private_1(name):
    return  'Hello,%s' % name
def _private_2(name):
    return  'Hi,%s' % name
def greeting(name):
    if len(name)>3:
        return  _private_1(name)
    else:
        return _private_2(name)

#我们在模块里公开greeting()函数，而把内部逻辑用
#private函数隐藏起来，这样，调用greeting()函数不
#用关心内部的private函数细节，这也是一种非常有用
# 的代码封装和抽象的方法，即：
#外部不需要引用的函数全部定义成private，只有外部
#需要引用的函数才定义为public

#-*- coding:utf-8 -*-
class Student(object):

    def __init__(self,name,score):
        self.name = name;
        self.score = score
    def print_score(self):
        print '%s:%s' % (self.name,self.score)

bart=Student('Bart Simpson',59)
lisa=Student('Lisa Simpson',87)

bart.print_score()
lisa.print_score()


