#coding:utf-8
import os

print 'Process (%s) start...' % os.getpid()
pid = os.fork()
if pid==0:
    print 'I am child process (%s) and my parent is %s.' (os.getpid(),os.getpgid())
else:
    print 'I (%s) just created a child process(%s).' % (os.getpid(),pid)
#以上又不能在windows下使用

#coding:utf-8
from multiprocessing import  Process
import os

#子进程要执行的代码
def run_proc(name):
    print 'Run child process %s (%s)...' % (name,os.getpid())

if __name__=='__main__':
    print 'Parent process %s.' % os.getpid()
    p = Process(target=run_proc,args=('test',))
    print 'Process will start.'
    p.start()
    p.join()
    print 'Process end.'

#coding:utf-8
from multiprocessing import  Pool
import os,time,random

def long_time_task(name):
    print 'Run task %s (%s)...' % (name,os.getpid())
    start = time.time()
    time.sleep(random,random()*3)
    end = time.time()
    print 'Task %s run %0.2f seconds.' % (name,(end-start))

if __name__=='__main__':
    print 'Parent process %s.' % os.getpid()
    p = Pool()
    for i in range(5):
        p.apply_async(long_time_task,args=(i,))
    print 'Waiting for all subprocess done...'
    p.close()
    p.join()
    print 'All subprocess done.'

#coding:utf-8
import os,time,threading

#新线程执行的代码：
def loop():
    print 'thread %s is running...' % threading.current_thread().name
    n = 0
    while n<5:
        n = n+1
        print 'thread %s >>> %s' % (threading.current_thread().name,n)
        time.sleep(1)
    print 'thread %s ended.' % threading.current_thread().name

print 'thread %s is running...' % threading.current_thread().name
t = threading.Thread(target=loop,name='LoopThread')
t.start()
t.join()
print 'thread %s ended' % threading.current_thread().name

# coding:utf-8
import time,threading

balance = 0
lock = threading.Lock()

def change_it(n):
    #先存后取，结果应该为0
    global  balance
    balance = balance + n
    balance = balance - n

def run_thread(n):
    for i in range(100000):
        #先要获取锁：
        lock.acquire()
        try:
            #放心改吧
            change_it()
        finally:
            #改完了一定要释放锁：
            lock.release()
t1=threading.Thread(target=run_thread,args=(5,))
t2=threading.Thread(target=run_thread,args=(8,))
t1.start()
t2.start()
t1.join()
t2.join()
print balance
