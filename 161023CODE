#-*- coding:utf-8 -*-
class Animal(object):
    def run(self):
        print 'Animal is running...'

class Dog(Animal):
    def run(self):
        print 'Dog is running...'
    def eat(self):
        print 'Eating meat...'
class Cat(Animal):
    def run(self):
        print 'Cat is running...'

dog=Dog()
dog.run()

cat=Cat()
cat.run()

a=list()#a是list类型
b=Animal()#b是Animal类型
c=Dog() #c是Dog类型

print isinstance(a,list)
print isinstance(b,Animal)
print isinstance(c,Dog)
b=Animal()
print isinstance(b,Dog)

def run_twice(animal):
    animal.run()
    animal.run()

run_twice(Animal())
#如果是这么写的话，就会在最后有个none
print 'nihao\n',run_twice(Animal())

run_twice(Dog())
run_twice(Cat())

class Tortoise(Animal):
    def run(self):
        print 'Tortoise is running slowly...'

run_twice(Tortoise())

#获取对象信息
#-*- coding:utf-8 -*-
class MyObject(object):
    def __init__(self):
        self.x=9
    def power(self):
        return self.x*self.x
obj = MyObject()
#有属性'x'吗?
print 'hasattr x:',hasattr(obj,'x')
print 'obj.x:',obj.x
print 'hasattr y:',hasattr(obj,'y')
#设置一个属性'y'
setattr(obj,'y',19)
print '（设置属性y之后）hasattr y:',hasattr(obj,'y')
print '获取属性y:',getattr(obj,'y')
print '用“.”获取属性y:',obj.y
#试图获取不存在的属性会抛出AttributeError错误
#print '获取属性z:',getattr(obj,'z')
#可以传入一个默认值，如果属性不存在就返回默认值
print '获取属性z:',getattr(obj,'z',404)
print 'hasattr power:',hasattr(obj,'power')
print '获取属性“power”:',getattr(obj,'power')
fn=getattr(obj,'power')
print fn
#调用fn()与调用obj.power()是一样的
print fn()

#一个正确的用法的例子：
def readImage(fp):
    if hasattr(fp,'read'):
        return readData(fp)
    return  None

#pass就是什么也不做，只是为了防止语法错误

#-*- coding:utf-8 -*-
class Student(object):
    pass


s = Student()
s.name = 'Michael'
print 's.name = ',s.name

#还可以尝试给实例绑定一个方法：
def set_age(self,age):
    self.age = age
from types import MethodType
s.set_age=MethodType(set_age,s,Student)
#调用实例方法，直接输出这行是None
s.set_age(25)
#测试
print s.age

s2=Student()
#给一个实例绑定的方法，对另一个实例是不起作用的
# s2.set_age(25)

#为了给所有实例都绑定方法，可以给class绑定方法：
def set_score(self,score):
    self.score=score
Student.set_score=MethodType(set_score,None,Student)
s.set_score(100)
print 's.score=',s.score
s2.set_score(99)
print 's2.score=',s2.score
#以上为动态绑定

#现在为用__slots__限定能够更改的属性
#-*- coding:utf-8 -*-

class Student(object):
    # 用tuple定义允许绑定的属性名称
    __slots__ = ('name', 'age')

s=Student()
s.name = 'Michael'
s.age = 25
#试图绑定没有的属性score出现错误
# s.score = 99
#__slots__定义的属性仅对当前类起作用，对子类没有作用
class GraduateStudent(Student):
    pass
g = GraduateStudent()
g.score=9999
print g.score
#property的第一部分
class Student(object):
    @property
    def score(self):
        return self._score

    @score.setter
    def score(self,value):
        if not isinstance(value,int):
            raise ValueError('score must be an integer!')
        if value < 0 or value > 100:
            raise ValueError('score must between 0~100!')
        self._score=value
s = Student()
s.score(60)
print s.score()
print s.score(9999)
#property的第二部分
class Student(object):
   @property
   def birth(self):
       return self._birth

   @birth.setter
   def birth(self,value):
       self._birth=value
   @property
   def age(self):
       return 2014-self._birth
#上面的birth是可读写属性，而age就是一个只读属性，
# 因为age可以通过birth和当地时间计算出来

s=Student()
s.birth = 1995
print s.birth
print s.age
