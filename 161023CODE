#-*- coding:utf-8 -*-
class Animal(object):
    def run(self):
        print 'Animal is running...'

class Dog(Animal):
    def run(self):
        print 'Dog is running...'
    def eat(self):
        print 'Eating meat...'
class Cat(Animal):
    def run(self):
        print 'Cat is running...'

dog=Dog()
dog.run()

cat=Cat()
cat.run()

a=list()#a是list类型
b=Animal()#b是Animal类型
c=Dog() #c是Dog类型

print isinstance(a,list)
print isinstance(b,Animal)
print isinstance(c,Dog)
b=Animal()
print isinstance(b,Dog)

def run_twice(animal):
    animal.run()
    animal.run()

run_twice(Animal())
#如果是这么写的话，就会在最后有个none
print 'nihao\n',run_twice(Animal())

run_twice(Dog())
run_twice(Cat())

class Tortoise(Animal):
    def run(self):
        print 'Tortoise is running slowly...'

run_twice(Tortoise())

#获取对象信息
#-*- coding:utf-8 -*-
class MyObject(object):
    def __init__(self):
        self.x=9
    def power(self):
        return self.x*self.x
obj = MyObject()
#有属性'x'吗?
print 'hasattr x:',hasattr(obj,'x')
print 'obj.x:',obj.x
print 'hasattr y:',hasattr(obj,'y')
#设置一个属性'y'
setattr(obj,'y',19)
print '（设置属性y之后）hasattr y:',hasattr(obj,'y')
print '获取属性y:',getattr(obj,'y')
print '用“.”获取属性y:',obj.y
#试图获取不存在的属性会抛出AttributeError错误
#print '获取属性z:',getattr(obj,'z')
#可以传入一个默认值，如果属性不存在就返回默认值
print '获取属性z:',getattr(obj,'z',404)
print 'hasattr power:',hasattr(obj,'power')
print '获取属性“power”:',getattr(obj,'power')
fn=getattr(obj,'power')
print fn
#调用fn()与调用obj.power()是一样的
print fn()

#一个正确的用法的例子：
def readImage(fp):
    if hasattr(fp,'read'):
        return readData(fp)
    return  None

#pass就是什么也不做，只是为了防止语法错误
