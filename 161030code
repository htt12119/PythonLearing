#-*- coding:utf-8 -*-
try:
    print 'try..'
    r = 10/int('a')
    print 'result:',r
except ValueError,e:
    print 'ValueError:',e
except ZeroDivisionError,e:
    print 'ZeroDivisionErrorï¼š',e
else:
    print 'no error!'
finally:
    print 'finally...'
print 'END'

#you
try:
    foo()
except StandardError,e:
    print 'StandardError'
except ValueError,e:
    print 'ValueError'

def foo(s):
    return  10/int(s)
def bar(s):
    return foo(s)*2
def main():
    try:
        bar('0')
    except StandardError,e:
        print 'Error!'
    finally:
        print 'finally...'
#-*- coding:utf-8 -*-
def foo(s):
    return 10/int(s)

def bar(s):
    return foo(s)*2

def main():
    bar('0')

main()
#-*- coding:utf-8 -*-
import logging

def foo(s):
    return 10/int(s)

def bar(s):
    return foo(s)*2

def main():
    try:
        bar('0')
    except StandardError,e:
        logging.exception(e)

main()
print 'END'
#-*- coding:utf-8 -*-
def FooError(StandarError):
    pass
def foo(s):
    n = int(s)
    if n==0:
        raise FooError('invalid value:%s' % s)
    return 10/n

foo()
#-*- coding:utf-8 -*-
def foo(s):
    n = int(s)
    return 10/n
def bar(s):
    try:
        return foo(s)*2
    except StandardError,e:
        print 'Error!'
        raise
def main():
    bar('0')

main()











        







