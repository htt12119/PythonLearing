#coding:utf-8
#用filter（）删除1-100内的素数
import math
def fil(n):
    flag = 0
    for i in range(2,int(math.sqrt(n)+1)):
        if n%i == 0:
            flag = 1
            break
    if flag == 1:
            return n
print filter(fil,range(1,101))

#coding:utf-8
#排序算法
print sorted([36,5,12,9,21])
def reversed_cmp(x,y):
    if x>y:
        return -1
    if x<y:
        return 1
    return 0

print sorted([36,5,12,9,21],reversed_cmp)

print sorted(['bob','about','Zoo','Credit'])

def cmp_ignore_case(s1,s2):
    u1=s1.upper()
    u2=s1.upper()
    if u1<u2:
        return -1
    if u1>u2:
        return 1
    return 0
print sorted(['bob','about','Zoo','Credit'],cmp_ignore_case)

#coding:utf-8
#实现可变参数求和
def calc_sum(*arg):
    ax = 0
    for n in args:
        ax = ax+n
    return ax

def lazy_sum(*args):
    def sum():
        ax=0
        for n in args:
            ax=ax+n
        return  ax
    return  sum
f = lazy_sum(1,3,5,7,9)
#调用lazy_sum(1,3,5,7,9)时，返回的并不是求和结果，而是求和函数
print f
#调用f时，才真正计算求和结果
print f()
#在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力
#调用lazy_sum()时，每次调用都会返回一个新的函数
f1=lazy_sum(1,3,5,7,9)
f2=lazy_sum(1,3,5,7,9)
print f1==f2

#coding:utf-8
def count():
    fs=[]
    for i in range(1,4):
        def f():
            return  i*i
        fs.append(f)
    return fs
f1,f2,f3=count()
print f1(),f2(),f3()

def count1():
    fs=[]
    for i in range(1,4):
        def f(j):
            def g():
                return  j*j
            return  g
        fs.append(f(i))
    return fs
f4,f5,f6=count1()
print f4(),f5(),f6()

#coding:utf-8
print map(lambda x:x*x,[1,2,3,4,5,6,7,8,9])

#以上就等价于
def f(x):
     return x*x
#匿名函数
f=lambda x:x*x
print f(5)
def build(x,y):
    return lambda:x*x+y*y
f=build(1,4)
#这是输出函数
print f
#这是调用函数
print f()

def now():
    print '2013-12-25'
f=now
f()

print now.__name__
print f.__name__

def log(func):
    def wrapper(*args,**kw):
        print 'call %s():' % func.__name__
        return func(*args,**kw)
    return wrapper
@log
def now():
    print '2012-12-25'
now()

def log(text):
    def decorator(func):
        def wrapper(*args,**kw):
            print '%s %s():' % (text,func.__name__)
            return func(*args,**kw)
        return wrapper
    return  decorator
@log('execute')
def now():
    print '2013-12-25'
now()
print now.__name__

import  functools
def log(func):
    @functools.wraps(func)
    def wrapper(**args,**kw):
        print 'call %s:' % func.__name__
        return func(*args,**kw)
    return wrapper

import functools
def log(text):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args,**kw):
            print '%s %s():' % (text,func.__name__)
            return func(*args,**kw)
        return wrapper
    return decorator

#请编写一个decorator，能在函数调用的前后打印出‘begin call’和‘end call’的日志。
import  functools
def log(func):
    @functools.wraps(func)
    def wrape(*args,**kw):
        print('begin call')
        execute=func(*args,**kw)
        print ('end call')
        return execute

    return wrape

@log
def now():
    print('2016-02-13')
now()


#coding:utf-8
#思考：
#能否写出@log的decoratot，使它既支持：
#@log
#def f()
#    pass
#log('execute')
#def f():
#    pass
#first way:
import functools
def log(text):
    def decorator(func):
        def wrapper(*args,**kw):
            print('begin call')
            print('%s : %s' % (text,func.__name__))
            execute=func(*args,**kw)
            print('end call')
            return execute
        return wrapper
    if isinstance(text,str):
        return  decorator

    func =text
    text = 'execute'
    return decorator(func)
@log('execute')
def now():
    print('2016-02-13')

now()
