#coding:utf-8
#用filter（）删除1-100内的素数
import math
def fil(n):
    flag = 0
    for i in range(2,int(math.sqrt(n)+1)):
        if n%i == 0:
            flag = 1
            break
    if flag == 1:
            return n
print filter(fil,range(1,101))

#coding:utf-8
#排序算法
print sorted([36,5,12,9,21])
def reversed_cmp(x,y):
    if x>y:
        return -1
    if x<y:
        return 1
    return 0

print sorted([36,5,12,9,21],reversed_cmp)

print sorted(['bob','about','Zoo','Credit'])

def cmp_ignore_case(s1,s2):
    u1=s1.upper()
    u2=s1.upper()
    if u1<u2:
        return -1
    if u1>u2:
        return 1
    return 0
print sorted(['bob','about','Zoo','Credit'],cmp_ignore_case)

#coding:utf-8
#实现可变参数求和
def calc_sum(*arg):
    ax = 0
    for n in args:
        ax = ax+n
    return ax

def lazy_sum(*args):
    def sum():
        ax=0
        for n in args:
            ax=ax+n
        return  ax
    return  sum
f = lazy_sum(1,3,5,7,9)
#调用lazy_sum(1,3,5,7,9)时，返回的并不是求和结果，而是求和函数
print f
#调用f时，才真正计算求和结果
print f()
#在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力
#调用lazy_sum()时，每次调用都会返回一个新的函数
f1=lazy_sum(1,3,5,7,9)
f2=lazy_sum(1,3,5,7,9)
print f1==f2
