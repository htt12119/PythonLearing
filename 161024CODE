#-*- coding:utf-8 -*-
class Student(object):
    def __init__(self,name):
        self.name = name
    def __str__(self):
        return 'Student object (name:%s）' % self.name
    __repr__=__str__

print Student('Michael')
s = Student('Machael')
s

#-*- coding:utf-8 -*-
class Fib(object):
    def __init__(self):
        self.a,self.b=0,1#初始化两个计数器a,b
    def __iter__(self):
        return self#实例本身就是迭代对象，故返回自己
    def next(self):
        self.a,self.b = self.b,self.a + self.b#计算下一个值
        if self.a > 100000:#退出循环的条件
            raise StopIteration();
        return self.a#返回下一个值

for n in Fib():
    print n

class Fib(object):
    def __init__(self):
        self.a,self.b=0,1#初始化两个计数器a,b
    def __iter__(self):
        return self#实例本身就是迭代对象，故返回自己
    def next(self):
        self.a,self.b = self.b,self.a + self.b#计算下一个值
        if self.a > 100000:#退出循环的条件
            raise StopIteration();
        return self.a#返回下一个值

for n in Fib():
    print n
#这个不明白怎么回事，说不能当list用
print 'hello',Fib()[5]

#哼哼哼哼哼分界线
class Fib(object):
    def __getitem__(self, n):
        a,b = 1,1
        for x in range(n):
            a,b = b,a + b
        return a
f=Fib()
print f[0]
print f[1]
print f[2]
print f[3]
print f[10]
print f[100]

print range(100)[5:10]

#-*- coding:utf-8 -*-
#改变原来的Fib类不能用切片的情况
class Fib(object):
    def __getitem__(self,n):
        if isinstance(n,int):
            a,b = 1,1
            for x in range(n):
                a,b=b,a+b
            return a
        if  isinstance(n,slice):
            start = n.start
            stop = n.stop
            a,b = 1,1
            L = []
            for x in range(stop):
                if x>= start:
                    L.append(a)
                a,b = b,a+b
            return  L
f = Fib()
print 'f[0:5]:',f[0:5]
print 'f[:10]:',f[:10]
#但是没有对step参数做处理
print 'f[:10:2]:',f[:10:2]
#-*- coding:utf-8 -*-
class Student(object):
    def __init__(self):
        self.name = 'Michael'
    def __getattr__(self, attr):
        if attr =='score':
            return 99
        if attr=='age':
            return lambda :25

s = Student()
print s.name
print s.score
print s.age()
#只有没有找到属性的情况下，才调用__getattr__
print s.abc

#-*- coding:utf-8 -*-
class Student(object):
    def __init__(self):
        self.name = 'Michael'
    def __getattr__(self, attr):
        if attr =='score':
            return 99
        if attr=='age':
            return lambda :25
        raise AttributeError('\'Student\' object has no attribute \'%s\'' % attr)


s = Student()
print s.name
print s.score
print s.age()
#只有没有找到属性的情况下，才调用__getattr__
print s.abc
