#-*- coding:utf-8 -*-
class Student(object):
    def __init__(self,name):
        self.name = name
    def __str__(self):
        return 'Student object (name:%s）' % self.name
    __repr__=__str__

print Student('Michael')
s = Student('Machael')
s

#-*- coding:utf-8 -*-
class Fib(object):
    def __init__(self):
        self.a,self.b=0,1#初始化两个计数器a,b
    def __iter__(self):
        return self#实例本身就是迭代对象，故返回自己
    def next(self):
        self.a,self.b = self.b,self.a + self.b#计算下一个值
        if self.a > 100000:#退出循环的条件
            raise StopIteration();
        return self.a#返回下一个值

for n in Fib():
    print n

class Fib(object):
    def __init__(self):
        self.a,self.b=0,1#初始化两个计数器a,b
    def __iter__(self):
        return self#实例本身就是迭代对象，故返回自己
    def next(self):
        self.a,self.b = self.b,self.a + self.b#计算下一个值
        if self.a > 100000:#退出循环的条件
            raise StopIteration();
        return self.a#返回下一个值

for n in Fib():
    print n
#这个不明白怎么回事，说不能当list用
print 'hello',Fib()[5]

#哼哼哼哼哼分界线
class Fib(object):
    def __getitem__(self, n):
        a,b = 1,1
        for x in range(n):
            a,b = b,a + b
        return a
f=Fib()
print f[0]
print f[1]
print f[2]
print f[3]
print f[10]
print f[100]

print range(100)[5:10]

#-*- coding:utf-8 -*-
#改变原来的Fib类不能用切片的情况
class Fib(object):
    def __getitem__(self,n):
        if isinstance(n,int):
            a,b = 1,1
            for x in range(n):
                a,b=b,a+b
            return a
        if  isinstance(n,slice):
            start = n.start
            stop = n.stop
            a,b = 1,1
            L = []
            for x in range(stop):
                if x>= start:
                    L.append(a)
                a,b = b,a+b
            return  L
f = Fib()
print 'f[0:5]:',f[0:5]
print 'f[:10]:',f[:10]
#但是没有对step参数做处理
print 'f[:10:2]:',f[:10:2]
#-*- coding:utf-8 -*-
class Student(object):
    def __init__(self):
        self.name = 'Michael'
    def __getattr__(self, attr):
        if attr =='score':
            return 99
        if attr=='age':
            return lambda :25

s = Student()
print s.name
print s.score
print s.age()
#只有没有找到属性的情况下，才调用__getattr__
print s.abc

#-*- coding:utf-8 -*-
class Student(object):
    def __init__(self):
        self.name = 'Michael'
    def __getattr__(self, attr):
        if attr =='score':
            return 99
        if attr=='age':
            return lambda :25
        raise AttributeError('\'Student\' object has no attribute \'%s\'' % attr)


s = Student()
print s.name
print s.score
print s.age()
#只有没有找到属性的情况下，才调用__getattr__
print s.abc
#-*- coding:utf-8 -*-
class Chain(object):
    def __init__(self,path=''):
        self._path = path
    def __getattr__(self, path):
        return Chain('%s/%s' % (self._path,path))
    def __str__(self):
        return self._path

print Chain().status.user.timeline.list
#GET /users/:user/repos
#Chain().users('Michael').repos

#-*- coding:utf-8 -*-
class Student(object):
    def __init__(self,name):
        self.name = name
    def __call__(self):
        print('My name is %s.' % self.name)
# s = Student('Michael')
# s()

print callable(Student('nihao'))#这句话很奇怪啊，我不写默认参数就是错误的
print callable(max)
print callable([1,2,3])
print callable(None)
print callable('string')

#-*- coding:utf-8 -*-
class ListMetaclass(type):
    def __new__(cls, name, bases, attrs):
        attrs['add'] = lambda self, value: self.append(value)
        return type.__new__(cls, name, bases, attrs)


class MyList(list):
    __metaclass__ = ListMetaclass
L=MyList()
L.add(1)
print L
l = list()
# l.add(1)

#-*- coding:utf-8 -*-
#尝试编写一个ORM框架
class Field(object):
    def __init__(self,name,column_type):
        self.name = name
        self.column_type = column_type
    def __str__(self):
        return '<%s:%s>' % (self.__class__.__name__,self.name)

class StringField(Field):
    def __init__(self,name):
        super(StringField,self).__init__(name,'varchar(100)')

class IntegerField(Field):
    def __init__(self,name):
        super(IntegerField,self).__init__(name,'bigint')

class ModelMetaclass(type):
    def __new__(cls,name,bases,attrs):
        if name=='Model':
            return type.__new__(cls,name,bases,attrs)
        mappings = dict()
        for k,v in attrs.iteritems():
            if isinstance(v,Field):
                print('Found mapping:%s==>%s' % (k,v))
                mappings[k] = v
        for k in mappings.iterkeys():
            attrs.pop(k)
        attrs['__table__'] = name #假设表明和类名一致
        attrs['__mappings__'] = mappings#保存属性和列的映射关系
        return type.__new__(cls,name,bases,attrs)

class Model(dict):
    __metaclass__ = ModelMetaclass

    def __init__(self,**kw):
        super(Model,self).__init__(**kw)

    def __getattr__(self, key):
        try:
            return self[key]
        except KeyError:
            raise AttributeError(r"'Model object has no attribute '%s'" % key)
    def __setattr__(self, key, value):
        self[key] = value

    def save(self):
        fields = []
        params = []
        args = []
        for k,v in self.__mappings__.iteritems():
            fields.append(v.name)
            params.append('?')
            args.append(getattr(self,k,None))
        sql = 'insert into %s (%s) values (%s)' % (self.__table__,','.join(fields),','.join(params))
        print ('SQL:%s' % sql)
        print ('ARGS:%s' % str(args))

class User(Model):
    #定义类的属性到列的映射
    id = IntegerField('id')
    name = StringField('username')
    email = StringField('email')
    password = StringField('password')

u = User(id=12345,name='Michael',email='test@orm.org',password='my-pwd')
u.save()


